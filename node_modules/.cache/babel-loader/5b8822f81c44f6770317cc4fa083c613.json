{"ast":null,"code":"var _jsxFileName = \"/home/abdullahps/Desktop/hackaton-next/src/App.tsx\";\nimport React from \"react\";\nimport \"./App.css\";\nimport { GitHubList } from \"./components/GithubList\";\nimport { MasterDetail, Item, Detail } from \"./components/MasterDetail\";\nimport { transformValue } from \"./Question3/jsQuestion\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst question3Logging = () => {\n  const initialObject = {\n    a: 123,\n    b: \"abc\",\n    c: [1, 2, 3, [1, 2, '2']]\n  };\n  const transformedObject = transformValue(initialObject);\n  console.warn(\"Note: Bad habit to console log to Browser Window, should be removed in production\");\n  console.log(JSON.stringify(transformedObject));\n};\n\nconst App = () => /*#__PURE__*/_jsxDEV(_Fragment, {\n  children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Welcome to the Frontend Hackathon\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n    children: \"Task 1 - React\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Implement a Master Detail component which renders a list of items on the left and a detail view on the right. When the user clicks on a list item the render function of the detail view should be called with the corresponding payload. The component should provide the following api:\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n    children: /*#__PURE__*/_jsxDEV(\"code\", {\n      children: `\n  <MasterDetail>\n    <Item payload={{content: \"Hello Peers\"}}>Intro</Item>\n    <Item payload={{content: \"Welcome to Cool Company\"}}>Welcome</Item>\n    <Detail>\n      {(payload) => payload.content}\n    </Detail>\n  </MasterDetail>\n    `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(MasterDetail, {\n    children: [/*#__PURE__*/_jsxDEV(Item, {\n      payload: {\n        content: \"Hello Peers\"\n      },\n      children: \"Intro\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Item, {\n      payload: {\n        content: \"Welcome to Cool Company\"\n      },\n      children: \"Welcome\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Detail, {\n      children: payload => payload.content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n    children: \"Task 2 - Graphql\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Query a list of all public repos of \\\"facebook\\\" via the\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n      href: \"https://developer.github.com/v4/\",\n      children: \"github graphql api\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), \". A\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n      href: \"https://www.apollographql.com/docs/react/\",\n      children: \"apollo client\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), \" is setup for you. To query Github, you will need to create a personal access token with scope `public_repo` (Access public repositories) (\", /*#__PURE__*/_jsxDEV(\"a\", {\n      href: \"https://github.com/settings/tokens/new\",\n      children: \"link\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 8\n    }, this), \") and store it in file `./.env`.\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Render the list with your `MasterDetail` component developed earlier. List the name of the repos on the left side and provide details like name and description when the user clicks on the item. Implement reasonable loading and error states for your components. If you could not complete Task 1 provide the same functionality without the MasterDetail component.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(GitHubList, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n    children: \"Task 3 - Javascript\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Implement a function which takes a arbitrary nested JS Object and do the following transformations:\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: [/*#__PURE__*/_jsxDEV(\"li\", {\n      children: [\"add +1 to each Number within in Object (eg:\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          fontStyle: \"italic\",\n          margin: \"0 5px\",\n          display: \"inline-block\"\n        },\n        children: \"x: 9 => x: 10\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), \")\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [\"add 'AE' to each String within in Object (eg:\", \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontStyle: \"italic\",\n          margin: \"0 5px\",\n          display: \"inline-block\"\n        },\n        children: \"y: 'abc' => y: 'abc AE'\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), \")\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n      children: \"The object should keep its structure!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n      children: \"Log the result to the browser console\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this), \"See a rough example structure below:\", /*#__PURE__*/_jsxDEV(\"pre\", {\n    children: /*#__PURE__*/_jsxDEV(\"code\", {\n      children: `\n  // initial object\n  {\n    a: 123,\n    b: 'abc'\n    c: [1, 2, 3]\n  }\n\n  // resulting object\n  {\n    a: 124,\n    b: 'abc AE'\n    c: [2, 3, 4]\n  }\n`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this), question3Logging(), \"The components you develop during the hackathon should be rendered inside this \", `<App />`, \" component.\", /*#__PURE__*/_jsxDEV(\"h2\", {\n    children: \"Best of Luck \\uD83D\\uDE80\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this)]\n}, void 0, true);\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/abdullahps/Desktop/hackaton-next/src/App.tsx"],"names":["React","GitHubList","MasterDetail","Item","Detail","transformValue","question3Logging","initialObject","a","b","c","transformedObject","console","warn","log","JSON","stringify","App","content","payload","fontStyle","margin","display"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport { GitHubList } from \"./components/GithubList\";\nimport { MasterDetail, Item, Detail } from \"./components/MasterDetail\";\nimport { transformValue } from \"./Question3/jsQuestion\";\n\nconst question3Logging = () => {\n  const initialObject = {\n    a: 123,\n    b: \"abc\",\n    c: [1, 2, 3,[1,2,'2']],\n  };\n  const transformedObject = transformValue(initialObject);\n  console.warn(\n    \"Note: Bad habit to console log to Browser Window, should be removed in production\"\n  );\n  console.log(JSON.stringify(transformedObject));\n};\n\nconst App = () => (\n  <>\n    <h1>Welcome to the Frontend Hackathon</h1>\n    <h2>Task 1 - React</h2>\n    <p>\n      Implement a Master Detail component which renders a list of items on the\n      left and a detail view on the right. When the user clicks on a list item\n      the render function of the detail view should be called with the\n      corresponding payload. The component should provide the following api:\n    </p>\n    <pre>\n      <code>\n        {`\n  <MasterDetail>\n    <Item payload={{content: \"Hello Peers\"}}>Intro</Item>\n    <Item payload={{content: \"Welcome to Cool Company\"}}>Welcome</Item>\n    <Detail>\n      {(payload) => payload.content}\n    </Detail>\n  </MasterDetail>\n    `}\n      </code>\n    </pre>\n    <MasterDetail>\n      <Item payload={{content: \"Hello Peers\"}}>Intro</Item>\n      <Item payload={{content: \"Welcome to Cool Company\"}}>Welcome</Item>\n      <Detail>\n        {(payload) => payload.content}\n      </Detail>\n    </MasterDetail>\n    <h2>Task 2 - Graphql</h2>\n    <p>\n      Query a list of all public repos of \"facebook\" via the{\" \"}\n      <a href=\"https://developer.github.com/v4/\">github graphql api</a>. A{\" \"}\n      <a href=\"https://www.apollographql.com/docs/react/\">apollo client</a> is\n      setup for you. To query Github, you will need to create a personal\n      access token with scope `public_repo` (Access public repositories)\n      (<a href=\"https://github.com/settings/tokens/new\">link</a>) and store it\n      in file `./.env`.\n    </p>\n    <p>\n      Render the list with your `MasterDetail` component developed\n      earlier. List the name of the repos on the left side and provide details\n      like name and description when the user clicks on the item. Implement\n      reasonable loading and error states for your components. If you could not\n      complete Task 1 provide the same functionality without the MasterDetail\n      component.\n    </p>\n    <GitHubList />\n    <h2>Task 3 - Javascript</h2>\n    <p>\n      Implement a function which takes a arbitrary nested JS Object and do the\n      following transformations:\n    </p>\n    <ul>\n      <li>\n        add +1 to each Number within in Object (eg:{\" \"}\n        <span\n          style={{\n            fontStyle: \"italic\",\n            margin: \"0 5px\",\n            display: \"inline-block\",\n          }}\n        >\n          x: 9 =&gt; x: 10\n        </span>\n        )\n      </li>\n      <li>\n        add 'AE' to each String within in Object (eg:{\" \"}\n        <div\n          style={{\n            fontStyle: \"italic\",\n            margin: \"0 5px\",\n            display: \"inline-block\",\n          }}\n        >\n          y: 'abc' =&gt; y: 'abc AE'\n        </div>\n        )\n      </li>\n      <li>The object should keep its structure!</li>\n      <li>Log the result to the browser console</li>\n    </ul>\n    See a rough example structure below:\n    <pre>\n      <code>{`\n  // initial object\n  {\n    a: 123,\n    b: 'abc'\n    c: [1, 2, 3]\n  }\n\n  // resulting object\n  {\n    a: 124,\n    b: 'abc AE'\n    c: [2, 3, 4]\n  }\n`}</code>\n    </pre>\n    {question3Logging()}\n    The components you develop during the hackathon should be rendered inside\n    this {`<App />`} component.\n    <h2>Best of Luck 🚀</h2>\n  </>\n);\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}