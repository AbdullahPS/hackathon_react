{"ast":null,"code":"var _jsxFileName = \"/home/abdullahps/Desktop/hackaton-next/src/components/GithubList.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useQuery } from 'react-apollo-hooks';\nimport { fbQuery } from '../queries/queries';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GitHubList = () => {\n  _s();\n\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(fbQuery);\n  const [fbList, setfbList] = useState([]);\n  useEffect(() => {\n    data && setfbList(data.search.edges);\n  }, [data]);\n  console.log(fbList);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"TBD\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 10\n  }, this);\n};\n\n_s(GitHubList, \"8kdMNMvo4VSyX97+hB0sr6REiFc=\", false, function () {\n  return [useQuery];\n});\n\n_c = GitHubList;\n\nvar _c;\n\n$RefreshReg$(_c, \"GitHubList\");","map":{"version":3,"sources":["/home/abdullahps/Desktop/hackaton-next/src/components/GithubList.tsx"],"names":["React","useEffect","useState","useQuery","fbQuery","GitHubList","data","loading","error","fbList","setfbList","search","edges","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,SAASC,OAAT,QAAwB,oBAAxB;;AACA,OAAO,MAAMC,UAAoB,GAAG,MAAM;AAAA;;AAWxC,QAAM;AAACC,IAAAA,IAAD;AAAMC,IAAAA,OAAN;AAAcC,IAAAA;AAAd,MAAqBL,QAAQ,CAACC,OAAD,CAAnC;AACA,QAAM,CAACK,MAAD,EAAQC,SAAR,IAAmBR,QAAQ,CAAS,EAAT,CAAjC;AACAD,EAAAA,SAAS,CAAC,MAAI;AAChBK,IAAAA,IAAI,IAAII,SAAS,CAACJ,IAAI,CAACK,MAAL,CAAYC,KAAb,CAAjB;AACG,GAFQ,EAEP,CAACN,IAAD,CAFO,CAAT;AAIFO,EAAAA,OAAO,CAACC,GAAR,CAAYL,MAAZ;AACE,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAnBM;;GAAMJ,U;UAWgBF,Q;;;KAXhBE,U","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useQuery } from 'react-apollo-hooks';\nimport { fbQuery } from '../queries/queries';\nexport const GitHubList: React.FC = () => {\n\n  interface node{\n    createdAt:string,\n    name:string,\n    url:string\n\n  }\n  interface data{\n    search:node[]\n  }\n  const {data,loading,error}=useQuery(fbQuery)\n  const [fbList,setfbList]=useState<node[]>([]);\n  useEffect(()=>{\ndata && setfbList(data.search.edges)\n  },[data])\n\nconsole.log(fbList)\n  return <div>TBD</div>;\n};\n"]},"metadata":{},"sourceType":"module"}